name: release
on:
  push:
    branches:
      - main
permissions:
  contents: write
  pull-requests: write
jobs:
  release-please:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      paths_released: ${{ steps.release.outputs.paths_released }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Release please
        uses: googleapis/release-please-action@v4
        id: release
      - name: echo
        if: ${{ steps.release.outputs.paths_released != '[]' }}
        run: echo "${{ fromJson(steps.release.outputs.pr).headBranchName }}"
  package-check:
    needs: release-please
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        package: ${{ fromJson(needs.release-please.outputs.paths_released) }}
    defaults:
      run:
        working-directory: ${{ matrix.package }}
    if: ${{ needs.release-please.outputs.paths_released != '[]' }}
    steps:
      - uses: actions/checkout@v4
      - name: Get Dockerfiles
        id: get-dockerfiles
        run: |
          DOCKERFILES=$(find . -maxdepth 1 -name "Dockerfile.*" | sort | jq -Rsc 'split("\n")[0:-1]')
          echo "dockerfiles=$DOCKERFILES" >> "$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"
      - uses: shiron-dev/actions/matrix-output-write@v1.2.0
        with:
          matrix-step-name: ${{ github.job }}
          matrix-key: ${{ matrix.package }}
          outputs: |-
            dockerfiles: [${{ matrix.package }}, ${{ steps.get-dockerfiles.outputs.dockerfiles }}]
  read:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: package-check
    outputs:
      result: "${{ steps.read.outputs.result }}"
    steps:
      - uses: shiron-dev/actions/matrix-output-read@v1.2.0
        id: read
        with:
          matrix-step-name: package-check
  docker-build:
    needs:
      - read
      - release-please
    runs-on: ubuntu-latest
    timeout-minutes: 360
    strategy:
      matrix:
        kv: ${{ fromJson(needs.read.outputs.result).dockerfiles }}
    name: docker-build ${{ matrix.kv }})
    steps:
      - uses: actions/checkout@v4
      - name: Set outputs
        id: vars
        run: |
          echo -e "${{ matrix.kv }}" | jq -r '.[]' > dockerfiles.txt
          package=$(head -n 1 dockerfiles.txt)
          echo "package=$package" >> $GITHUB_OUTPUT
          dockerfile=$(tail -n 1 dockerfiles.txt)
          echo "dockerfile=$dockerfile" >> $GITHUB_OUTPUT
          echo "tag=$(cat .release-please-manifest.json | jq -r .${{ needs.package-check.outputs.package }})" >> $GITHUB_OUTPUT
          echo "platform=$(./scripts/get_platform.sh ${{ needs.package-check.outputs.package }}/${{ matrix.dockerfile }})" >> $GITHUB_OUTPUT
          echo "ghcr_repo=ghcr.io/${{ github.repository_owner }}/${{ needs.package-check.outputs.package }}-test" >> $GITHUB_OUTPUT
      - name: Check outputs
        run: echo ${{ steps.vars.outputs.tag }}
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT }}
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ${{ needs.package-check.outputs.package }}
          push: true
          platforms: ${{ steps.vars.outputs.platform }}
          file: "${{ needs.package-check.outputs.package }}/${{ matrix.dockerfile }}"
          tags: |
            ${{ steps.vars.outputs.ghcr_repo }}:${{ steps.vars.outputs.tag }}-${{ steps.vars.outputs.platform }}
  # push-image:
  #   needs:
  #     - docker-build
  #     - package-check
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set outputs
  #       id: vars
  #       run: |
  #         echo "tag=$(cat .release-please-manifest.json | jq -r .${{ needs.package-check.outputs.package }})" >> $GITHUB_OUTPUT
  #         echo "platform=$(./scripts/get_platform.sh ${{ needs.package-check.outputs.package }}/${{ matrix.dockerfile }})" >> $GITHUB_OUTPUT
  #         echo "ghcr_repo=ghcr.io/${{ github.repository_owner }}/${{ needs.package-check.outputs.package }}-test" >> $GITHUB_OUTPUT
  #     - name: Check outputs
  #       run: echo ${{ steps.vars.outputs.tag }}
  #     - uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GH_PAT }}
  #     - name: Push image
  #       run: docker push ${{ steps.vars.outputs.ghcr_repo }}:${{ steps.vars.outputs.tag }}-${{ steps.vars.outputs.platform }}

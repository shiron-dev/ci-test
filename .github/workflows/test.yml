name: test
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [1, 2, 3]
    steps:
      - name: Test
        run: echo "Testing package ${{ matrix.package }}"
      - if: always()
        run: echo '${{ toJSON(matrix) }}' > ./matrix.txt
      - if: always()
        id: generate-unique-id
        run: echo 'name=result=${{ hashFiles('./matrix.txt') }}' >> $GITHUB_OUTPUT
      - if: always()
        id: generate-outputs
        uses: actions/github-script@v4
        with:
          script: |
            const fs = require('fs')

            const id = "${{ steps.generate-unique-id.outputs.result }}"
            const matrix = ${{ toJSON(matrix) }}
            const status = "${{ job.status }}"
            const exportedValues = { /* any Job's outputs */ }

            const outputs = { matrix, status, id, exportedValues }

            fs.writeFileSync("${{ github.workspace }}/outputs.txt", JSON.stringify(outputs))
      - if: always()
        uses: actions/upload-artifact@v4
        with:
          name: outputs-${{ steps.generate-unique-id.outputs.result }}
          path: ${{ github.workspace }}/outputs.txt
  test2:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: matrix-job-outputs
      - uses: actions/github-script@v4
        with:
          script: |
            const fs = require('fs')
            const path = require('path')

            const isSubset = (parent, child) => {
              return Object.keys(child)
                .every(k => (k in parent) && (child[k] === parent[k]))
            }

            const query = {
              matrix: {
                os: 'ubuntu-latest',
              },
              status: 'success'
            }

            const directory = path.resolve('./matrix-job-outputs')
            const matchedOutputs = []

            for (const dirName of fs.readdirSync(directory)) {
              const filePath = path.join(directory, dirName, 'outputs.txt')
              const outputs = JSON.parse(fs.readFileSync(filePath))

              if (outputs.status === query.status && isSubset(outputs.matrix, query.matrix)) {
                matchedOutputs.push(outputs)
              }
            }

            console.log(matchedOutputs)
